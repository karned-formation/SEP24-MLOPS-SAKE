services:
  # Service OCR
  ocr-service:
    profiles: ["training", "prediction"]
    env_file:
    - path: ./.env
    image: killiankopp/ms-ocr-ia:1.3
    # le code source est dans ce repo: https://github.com/karned-kapla/ms-ocr-ia
    # l'hébergement DockerHub: https://hub.docker.com/r/killiankopp/ms-ocr-ia
    container_name: ocr-service
    ports:
      - ${DATA_INGESTION_PORT_OCR}:80
    networks:
      - sake

  # Service de nettoyage de texte
  clean-service:
    profiles: ["training", "prediction"]
    env_file:
    - path: ./.env
    build:
      context: docker/clean_text/ 
      dockerfile: Dockerfile  
      cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
        - clean-service:cache
    image: clean-service:1.0
    container_name: clean-service
    ports:
      - ${DATA_CLEANING_PORT_CLEAN_TEXT}:80
    networks:
      - sake

  # Service ETL
  etl-service:
    profiles: ["training", "prediction"]
    env_file:
    - path: ./.env
    build:
      context: docker/etl/ 
      dockerfile: Dockerfile  
      cache_from: 
        - etl-service:cache  
    image: etl-service:1.0
    container_name: etl-service
    depends_on: 
      - ocr-service
      - clean-service
    ports:
      - ${DATA_ETL_PORT_ETL}:80
    networks:
      - sake
    
  # Service de prétraitement
  preprocessing-service:
    profiles: ["training"]
    env_file:
    - path: ./.env
    build:
      context: docker/preprocessing/ 
      dockerfile: Dockerfile  
      cache_from: 
        - preprocessing-service:cache
    image: preprocessing-service:1.0
    container_name: preprocessing-service
    ports:
      - ${DATA_PREPROCESSING_PORT_PREPROCESSING}:80
    networks:
      - sake

  # Service d'entraînement
  train-service:
    profiles: ["training"]
    env_file:
    - path: ./.env
    build:
      context: docker/train/  
      dockerfile: Dockerfile  
      cache_from: 
        - train-service:cache
    image: train-service:1.0
    container_name: train-service
    ports:
      - ${MODEL_TRAIN_PORT_TRAIN}:80
    networks:
      - sake

  # Service d'évaluation
  eval-service:
    profiles: ["training"]
    env_file:
    - path: ./.env
    build:
      context: docker/eval/  
      dockerfile: Dockerfile  
      cache_from: 
        - eval-service:cache
    image: eval-service:1.0
    container_name: eval-service
    ports:
      - ${MODEL_EVAL_PORT_EVAL}:80
    networks:
      - sake

  
  # Service d'Orchestration
  predict-orchestrator-service:
    profiles: ["prediction"]
    env_file:
    - path: ./.env
    build:
      context: docker/orchestrator/  
      dockerfile: Dockerfile  
      cache_from: 
        - predict-orchestrator-service:cache
    image: predict-orchestrator:1.0  
    container_name: predict-orchestrator-service
    depends_on: 
      - etl-service
      - predict-service
    ports:
      - "${ORCHESTRATOR_PORT_ORCHESTRATOR}:80"
    networks:
      - sake
  
  
  predict-service:
    profiles: ["prediction"]
    env_file:
    - path: ./.env
    build:
      context: docker/predict/  
      dockerfile: Dockerfile  
      cache_from:
        - predict:cache
    image: predict:1.0  
    container_name: predict-service
    ports:
      - "${PREDICT_PORT_PREDICT}:80"
    networks:
      - sake
    secrets:
      - aws_secrets

  # Backend d'administration et gestion des données avec DVC et MLFLOW
  admin-backend-service:
    profiles: ["training"]
    env_file:
    - path: ./.env
    build:
      context: docker/admin-backend/  
      dockerfile: Dockerfile  
      cache_from:
        - admin-backend-service:cache
    image: admin-backend-service:1.0  
    container_name: admin-backend-service
    ports:
      - "${ADMIN_BACKEND_PORT}:80"
    networks:
      - sake
    secrets:
      - backend_secrets    

  #  Streamlit d'administration, envoi des requêtes vers admin-backend-service
  admin-frontend-service:
    profiles: ["training"]
    env_file:
    - path: ./.env
    build:
      context: docker/admin-frontend/  
      dockerfile: Dockerfile  
      cache_from:
        - admin-frontend-service:cache
    image: admin-frontend-service:1.0  
    container_name: admin-frontend-service
    ports:
      - "${ADMIN_FRONTEND_PORT}:80"
    networks:
      - sake

  # Prometheus Service
  prometheus-service:
    profiles: ["training", "prediction"]
    build:
      context: docker/prometheus/
      dockerfile: Dockerfile
    image: prometheus-service:1.0
    container_name: prometheus-service
    ports:
      - "9090:9090"
    networks:
      - sake

  # Grafana Service
  grafana-service:
    profiles: ["training", "prediction"]
    build:
      context: docker/grafana/
      dockerfile: Dockerfile
    image: grafana-service:1.0
    container_name: grafana-service
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Set the admin password
    ports:
      - "3000:3000"
    networks:
      - sake
  
      
  node-exporter-service:
    profiles: ["training", "prediction"]
    image: prom/node-exporter:latest
    container_name: node-exporter-service
    networks:
      - sake
    ports:
      - "9100:9100"
  
  alertmanager:
    profiles: ["training", "prediction"]
    build:
      context: docker/alertmanager/
      dockerfile: Dockerfile
    image: alertmanager:1.0
    container_name: alertmanager-service
    ports:
      - "9093:9093"
    networks:
      - sake
  
  frontend-service:
    profiles: ["prediction"]
    env_file:
    - path: ./.env
    build:
      context: docker/frontend/  
      dockerfile: Dockerfile  
      cache_from: 
        - frontend-service:cache
    image: frontend-service:1.0  
    container_name: frontend-service
    depends_on: 
      - predict-orchestrator-service
    ports:
      - "${FRONTEND_PORT_PREDICT}:80"
    networks:
      - sake
  
  file-service:
    profiles: ["training", "prediction"]
    env_file:
    - path: ./.env
    build:
      context: docker/file/  
      dockerfile: Dockerfile  
      cache_from: 
        - file-service:cache
    image: file-service:1.0  
    container_name: file-service
    ports:
      - "${FILE_PORT_PREDICT}:80"
    networks:
      - sake

networks:
  sake:
    driver: bridge

secrets:
  backend_secrets:
    file: .env_original
  aws_secrets:
    file: .env_original