services:
  # Service OCR
  ms-OCR:
    env_file:
    - path: ./.env
    image: killiankopp/ms-ocr-ia:1.1
    # le code source est dans ce repo: https://github.com/karned-kapla/ms-ocr-ia
    # l'hébergement DockerHub: https://hub.docker.com/r/killiankopp/ms-ocr-ia
    container_name: OCR
    ports:
      - ${DATA_INGESTION_PORT_OCR}:8901
    networks:
      - sake

  # Service de nettoyage de texte
  ms-sake-clean-text:
    env_file:
    - path: ./.env
    build:
      context: .  
      dockerfile: docker/clean_text/Dockerfile  
      args:
        SOURCE_DIR: src/data
        DOCKERFILE_DIR: docker/clean_text  
        LOG_DIR: src
      cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
        - ms-sake-clean-text:cache  
    image: ms-sake-clean-text:1.0 
    container_name: clean_text
    ports:
      - "${DATA_CLEANING_PORT_CLEAN_TEXT}:80"
    networks:
      - sake
    volumes: # /!\ les variables d'environnement UID et GID doivent être définies pour désigner le propriétaire hôte de ces volumes
      - ./${DATA_GENERAL_LOG_DIR}:/app/${DATA_GENERAL_LOG_DIR}

  # Service ETL
  ms-sake-ETL:
    env_file:
    - path: ./.env
    build:
      context: .  
      dockerfile: docker/etl/Dockerfile  
      args:
        SOURCE_DIR: src/
        DOCKERFILE_DIR: docker/etl  
        LOG_DIR: src
      cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
        - ms-sake-etl:cache  
    image: ms-sake-etl:1.0
    container_name: ETL
    depends_on: # pour indiquer la dépendance des dockers (Lance ces dockers /!\ ça ne vérifie pas qu'ils soient prêts)
      - ms-OCR
      - ms-sake-clean-text
    ports:
      - ${DATA_ETL_PORT_ETL}:80
    networks:
      - sake
    volumes: # /!\ les variables d'environnement UID et GID doivent être définies pour désigner le propriétaire hôte de ces volumes
      - ./${DATA_STRUCTURE_RAW_RAW_DATASET_DIR}:/app/${DATA_STRUCTURE_RAW_RAW_DATASET_DIR}
      - ./${DATA_INGESTION_OCR_TEXT_DIR}:/app/${DATA_INGESTION_OCR_TEXT_DIR}
      - ./${DATA_CLEANING_CLEANED_DATASETS_DIR}:/app/${DATA_CLEANING_CLEANED_DATASETS_DIR}
      - ./${DATA_GENERAL_LOG_DIR}:/app/${DATA_GENERAL_LOG_DIR}
    
  # Service de prétraitement
  ms-sake-preprocessing:
    env_file:
    - path: ./.env
    build:
      context: .  
      dockerfile: docker/preprocessing/Dockerfile  
      args:
        SOURCE_DIR: src/preprocessing
        DOCKERFILE_DIR: docker/preprocessing
        LOG_DIR: src
      cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
        - ms-sake-preprocessing:cache
    image: ms-sake-preprocessing:1.0  
    container_name: preprocessing
    ports:
      - "${DATA_PREPROCESSING_PORT_PREPROCESSING}:80"
    networks:
      - sake
    volumes: # /!\ les variables d'environnement UID et GID doivent être définies pour désigner le propriétaire hôte de ces volumes
      - ./${DATA_CLEANING_CLEANED_DATASETS_DIR}:/app/${DATA_CLEANING_CLEANED_DATASETS_DIR}
      - ./${DATA_PREPROCESSING_PREPROCESSED_DATA_DIR}:/app/${DATA_PREPROCESSING_PREPROCESSED_DATA_DIR}
      - ./${DATA_PREPROCESSING_MODELS_DIR}:/app/${DATA_PREPROCESSING_MODELS_DIR}
      - ./${DATA_GENERAL_LOG_DIR}:/app/${DATA_GENERAL_LOG_DIR}

  # Service d'entraînement
  ms-sake-train:
    env_file:
    - path: ./.env
    build:
      context: .  
      dockerfile: docker/train/Dockerfile  
      args:
        SOURCE_DIR: src/train
        DOCKERFILE_DIR: docker/train
        LOG_DIR: src
      cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
        - ms-sake-train:cache
    image: ms-sake-train:1.0  
    container_name: train
    ports:
      - "${MODEL_TRAIN_PORT_TRAIN}:80"
    networks:
      - sake
    volumes: # /!\ les variables d'environnement UID et GID doivent être définies pour désigner le propriétaire hôte de ces volumes
      - ./${DATA_PREPROCESSING_PREPROCESSED_DATA_DIR}:/app/${DATA_PREPROCESSING_PREPROCESSED_DATA_DIR}
      - ./${DATA_PREPROCESSING_MODELS_DIR}:/app/${DATA_PREPROCESSING_MODELS_DIR}
      - ./${DATA_GENERAL_LOG_DIR}:/app/${DATA_GENERAL_LOG_DIR}

  # Service d'évaluation
  ms-sake-eval:
    env_file:
    - path: ./.env
    build:
      context: .  
      dockerfile: docker/eval/Dockerfile  
      args:
        SOURCE_DIR: src/
        DOCKERFILE_DIR: docker/eval
        LOG_DIR: src
      cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
        - ms-sake-eval:cache
    image: ms-sake-eval:1.0  
    container_name: eval
    ports:
      - "${MODEL_EVAL_PORT_EVAL}:80"
    networks:
      - sake
    volumes: # /!\ les variables d'environnement UID et GID doivent être définies pour désigner le propriétaire hôte de ces volumes
      - ./${DATA_PREPROCESSING_PREPROCESSED_DATA_DIR}:/app/${DATA_PREPROCESSING_PREPROCESSED_DATA_DIR}
      - ./${DATA_PREPROCESSING_MODELS_DIR}:/app/${DATA_PREPROCESSING_MODELS_DIR}
      - ./${MODEL_EVAL_METRICS_DIR}:/app/${MODEL_EVAL_METRICS_DIR}
      - ./${DATA_GENERAL_LOG_DIR}:/app/${DATA_GENERAL_LOG_DIR}
      - ./${DATA_CLEANING_CLEANED_DATASETS_DIR}:/app/${DATA_CLEANING_CLEANED_DATASETS_DIR}

  # # Service de prédiction
  # ms-sake-predict:
  #   env_file:
  #   - path: ./.env
  #   build:
  #     context: .  
  #     dockerfile: docker/predict/Dockerfile  
  #     args:
  #       SOURCE_DIR: src/
  #       DOCKERFILE_DIR: docker/predict
  #       LOG_DIR: src
  #       MODELS_DIR: models/
  #     cache_from: # pour force docker-compose à regarder le cache de ce docker (quand on utilise `docker-compose up --build`)
  #       - ms-sake-predict:cache
  #   image: ms-sake-predict:1.0  
  #   container_name: predict
  #   ports:
  #     - "${PREDICT_PORT_PREDICT}:80"
  #   networks:
  #     - sake
      
networks:
  sake:
    driver: bridge